@using Microsoft.Extensions.Logging
@using Quiz.Application.Dtos;
@using Quiz.Application.Exams
@using Quiz.Application.Sessions;
@using Microsoft.JSInterop;
@using Quiz.Application.Users

@inject IExamSessionAppService _examSessionAppService

@inject ILogger<OverallSessionStatsButtons> _logger
@inject IJSRuntime JsRuntime

<div class="d-grid mt-3 gap-2 d-flex justify-content-center">
	<button type="button" class="btn btn-danger"
		@onclick="@(() => DeleteClosedSessions(RootExamId))">
		Delete closed sessions
	</button>
	<button type="button" class="btn btn-danger"
		@onclick="@(() => DeleteOldNotes(RootExamId))">
		Delete old errors
	</button>
</div>

@code {
	// Demonstrates how a parent component can supply parameters
	[Parameter]
	public Guid? RootExamId { get; set; } = default!;

	[Parameter]
	public CandidateDto? User { get; set; }

	[Parameter]
	public bool NeedToRefresh {
		get { return _needToRefresh; }
		set {
			if (value != _needToRefresh) {
				_needToRefresh = value;
				NeedToRefreshChanged?.InvokeAsync(value);
			}
		}
	}

	[Parameter]
	public EventCallback<bool>? NeedToRefreshChanged { get; set; }

	private bool _needToRefresh;
	protected int WaitingCnt;

	/// <summary>
	/// 
	/// </summary>
	/// <param name="rootExamId"></param>
	/// <returns></returns>
	protected async Task DeleteClosedSessions(Guid? rootExamId) {
		bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Do you want to delete old exam sessions?"); // Confirm
		if (!confirmed) return;

		WaitingCnt++;
		try {
			NeedToRefresh = false;
			var total = await _examSessionAppService.DeleteUserSessions(
									new UserSessionsRequestDto {
										//CandidateId = (User != null) ? Guid.Parse(User!.Id) : null,
										CandidateId = User?.Id,
										ExamId = rootExamId,
										MaxDeep = 10,
									});
			NeedToRefresh = (total > 0);
			_ = JsRuntime.InvokeVoidAsync("alert", $"{total} user's sessions deleted"); // Alert
		} catch(Exception ex) {
			_logger.LogError(ex, ex.Message);
			_ = JsRuntime.InvokeVoidAsync("alert", "Oops! An error occurred trying to execute the requested operation: " + ex.Message);
		} finally {
			if (WaitingCnt > 0) WaitingCnt--;
		}
	}

	/// <summary>
	/// 
	/// </summary>
	/// <param name="rootExamId"></param>
	/// <returns></returns>
	protected async Task DeleteOldNotes(Guid? rootExamId) {
		bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Do you want to delete old notes and errors?"); // Confirm
		if (!confirmed) return;

		WaitingCnt++;
		try {
			NeedToRefresh = false;
			var total = await _examSessionAppService.DeleteCandidateNotes(
									new UserSessionsRequestDto {
										CandidateId = User?.Id,
										ExamId = rootExamId,
										MaxDeep = 10,
									});
			_ = JsRuntime.InvokeVoidAsync("alert", $"{total} user's notes and error deleted"); // Alert
			NeedToRefresh = (total > 0);
		} catch(Exception ex) {
			_logger.LogError(ex, ex.Message);
			_ = JsRuntime.InvokeVoidAsync("alert", "Oops! An error occurred trying to execute the requested operation: " + ex.Message);
		} finally {
			if (WaitingCnt > 0) WaitingCnt--;
		}
	}
}