@page "/fetchdata"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Quiz.Application
@using Quiz.Application.Weather

@*@attribute [Authorize]*@

@*@inject HttpClient StandardHttpClient*@
@inject IHttpClientFactory ClientFactory
@inject NavigationManager Navigation

<PageTitle>Weather forecast</PageTitle>

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (forecasts == null) {
	<p><em>Loading...</em></p>
} else {
	<table class="table">
		<thead>
			<tr>
				<th>Date</th>
				<th>Temp. (C)</th>
				<th>Temp. (F)</th>
				<th>Summary</th>
			</tr>
		</thead>
		<tbody>
			@foreach (var forecast in forecasts) {
				<tr>
					<td>@forecast.Date.ToShortDateString()</td>
					<td>@forecast.TemperatureC</td>
					<td>@forecast.TemperatureF</td>
					<td>@forecast.Summary</td>
				</tr>
			}
		</tbody>
	</table>
}

@code {
	private WeatherForecast[]? forecasts;

	protected override async Task OnInitializedAsync() {
		try {
			var httpClient = ClientFactory.CreateClient(QuizConstants.ClientNames.Anonymous /* QuizConstants.ClientNames.Standard*/);
			forecasts = await httpClient.GetFromJsonAsync<WeatherForecast[]>("WeatherForecast");
		} catch (AccessTokenNotAvailableException exception) {
			exception.Redirect();
		} catch (HttpRequestException ex) {
			if (ex.StatusCode == System.Net.HttpStatusCode.Unauthorized) {
				Navigation.NavigateTo($"authentication/login?returnUrl={Uri.EscapeDataString(Navigation.Uri)}");
			} else {
				throw;
			}
		}
	}
}
