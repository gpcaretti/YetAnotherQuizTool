@page "/QuizSettings"

@using System.ComponentModel.DataAnnotations;
@using System.Text.Json;
@using Microsoft.AspNetCore.Components.Authorization;
@using Microsoft.AspNetCore.Components.Forms;
@using Microsoft.AspNetCore.Components.Web;
@using Microsoft.AspNetCore.Identity;
@using Microsoft.JSInterop;
@using Quiz.Application.Dtos;
@using Quiz.Application.Exams
@using Quiz.Application.Sessions;

@inject AuthenticationStateProvider GetAuthenticationStateAsync
@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager
@inject NavigationManager UriHelper

@inject IExamAppService _examAppService
@inject IExamSessionAppService _examSessionAppService

@inject ILogger<QuizSettings> _logger
@inject IJSRuntime JsRuntime

@attribute [Authorize(Roles = $"{QuizConstants.Roles.Candidate},{QuizConstants.Roles.Admin}")]

<h3>Quiz Settings</h3>

@if (WaitingCnt > 0) {
	<div class="spinner mx-auto align-middle" style="z-index: 1000;"></div>
}


<div class="row">
	<div class="card full-space-col col-lg-9">
		<div class="card-header">
			<h4 class="card-title">User sessions</h4>
		</div>
		<div class="card-body">
			<div class="list-group list-group-numbered">
				<div class="list-group-item d-flex justify-content-between align-items-start bg-primary text-white">
					<span class="ms-2 me-auto">General statistics</span>
				</div>
				<div class="list-group-item d-flex justify-content-between align-items-start text-success">
					<span class="ms-2 me-auto">Closed exam sessions</span>
					<span class="badge bg-success rounded-pill">@(Stats.Sum(s => s.NumOfCarriedOutSessions))</span>
				</div>
			</div>

			@foreach (var exam in Stats) {
				<div class="list-group list-group-numbered mt-3">
					<div class="list-group-item d-flex justify-content-between align-items-start bg-secondary text-white">
						<span class="ms-2 me-auto">@exam.ExamName</span>
					</div>
					<div class="list-group-item d-flex justify-content-between align-items-start text-success">
						<span class="ms-2 me-auto">Total questions</span>
						<span class="badge bg-primary rounded-pill">@exam.NumOfAvailableQuestions</span>
					</div>
					<div class="list-group-item d-flex justify-content-between align-items-start text-success">
						<span class="ms-2 me-auto">Carried out sessions</span>
						<span class="badge bg-success rounded-pill">@exam.NumOfCarriedOutSessions</span>
					</div>
					<div class="list-group-item d-flex justify-content-between align-items-start text-success">
						<span class="ms-2 me-auto">Errors still open</span>
						<span class="badge bg-danger rounded-pill">@exam.NumOfWrongAnswers</span>
					</div>
					<div class="list-group-item d-flex justify-content-between align-items-start text-success">
						<span class="ms-2 me-auto">Marked as doubt</span>
						<span class="badge bg-warning rounded-pill">@exam.NumOfDoubtAnswers</span>
					</div>
					<div class="list-group-item d-flex justify-content-between align-items-start text-success">
						<span class="ms-2 me-auto">Missing questions</span>
						<span class="badge bg-secondary rounded-pill">@exam.NumOfNeverAnswered</span>
					</div>
				</div>
			}

			<div class="d-grid mt-3 gap-2 d-flex justify-content-center">
				<button type="button" class="btn btn-danger"
					@onclick="@DeleteClosedSessions">
					Delete closed sessions
				</button>
				<button type="button" class="btn btn-danger"
					@onclick="@DeleteOldNotes">
					Delete old errors
				</button>
			</div>
		</div>
	</div>
</div>
@code {
	protected ApplicationUser? User;

	protected int WaitingCnt;

	protected IList<SessionsStatisticsDto> Stats = new List<SessionsStatisticsDto>();

	protected override async Task OnInitializedAsync() {
		WaitingCnt = 1;
		try {
			// get the current user
			AuthenticationState authState = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
			User = await UserManager.GetUserAsync(authState.User);

			Stats = await _examSessionAppService.GetUserStats(
				new UserSessionsRequestDto {
					CandidateId = Guid.Parse(User.Id),
				});
		} finally {
			if (WaitingCnt > 0) WaitingCnt--;
		}
	}

	//protected async Task GetUserStats() {
	//	WaitingCnt++;
	//	try {
	//		NumOfClosedSessions  = await _examSessionAppService.CountUserSessions(new UserSessionsRequestDto { CandidateId = User.Id });
	//		NumOfRecordedNotes  = await _examSessionAppService.CountCandidateErrors(new UserSessionsRequestDto { CandidateId = User.Id });
	//	} finally {
	//		if (WaitingCnt > 0) WaitingCnt--;
	//	}
	//}

	protected async Task DeleteClosedSessions() {
		bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Do you want to delete old exam sessions?"); // Confirm
		if (!confirmed) return;

		//WaitingCnt++;
		//try {
		//	var total = await _examSessionAppService.DeleteUserSessions(new UserSessionsRequestDto { CandidateId = User.Id });
		//	if (total > 0) await GetUserStats();
		//	_ = JsRuntime.InvokeVoidAsync("alert", $"{total} user's sessions deleted"); // Alert
		//} catch(Exception ex) {
		//	_logger.LogError(ex, ex.Message);
		//	_ = JsRuntime.InvokeVoidAsync("alert", "Oops! An error occurred trying to execute the requested operation: " + ex.Message);
		//} finally {
		//	if (WaitingCnt > 0) WaitingCnt--;
		//}
	}

	protected async Task DeleteOldNotes() {
		bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Do you want to delete old notes and errors?"); // Confirm
		if (!confirmed) return;

		//WaitingCnt++;
		//try {
		//	var total = await _examSessionAppService.DeleteCandidateNotes(new UserSessionsRequestDto { CandidateId = User.Id });
		//	if (total > 0) await GetUserStats();
		//	_ = JsRuntime.InvokeVoidAsync("alert", $"{total} notes deleted"); // Alert
		//} catch(Exception ex) {
		//	_logger.LogError(ex, ex.Message);
		//	_ = JsRuntime.InvokeVoidAsync("alert", "Oops! An error occurred trying to execute the requested operation: " + ex.Message);
		//} finally {
		//	if (WaitingCnt > 0) WaitingCnt--;
		//}
	}
}
