@page "/"
@using Microsoft.EntityFrameworkCore
@using Microsoft.Extensions.Configuration
@using Quiz.Application.Exams
@using Quiz.Application.UI;
@using Quiz.Domain
@using System.Diagnostics
@using static Microsoft.Maui.ApplicationModel.Permissions

@implements IDisposable
@inject NavigationManager _navManager
@inject IServiceProvider _serviceProvider
@inject IConfiguration _configuration
@inject IUIAppService _uiService

<h1>Welcome!</h1>

@*@if (!_signInManager.IsSignedIn(User)) {
	<h3 class="text-danger">Please, loggin to use following commands</h3>
	}
*@

<div class="my-3">
	<div class="list-group">
		<button type="button" class="list-group-item list-group-item-action py-2" @onclick="@(() => _navManager.NavigateTo(QuizAppConsts.Navigation.QuizRunner))">
			<div class="fw-bold text-primary">Run a quiz session</div>
		</button>

		<button type="button" class="list-group-item list-group-item-action py-2" @onclick="@(() => _navManager.NavigateTo(QuizAppConsts.Navigation.OldQuizSessions))">
			<div class="fw-bold text-primary">Restore old or not finished quiz session</div>
		</button>

		<button type="button" class="list-group-item list-group-item-action py-2" @onclick="@(() => _navManager.NavigateTo(QuizAppConsts.Navigation.QuizStatistics))">
			<div class="fw-bold text-primary">Quiz statistics</div>
		</button>
	</div>
</div>

@*<SurveyPrompt Title="How is Blazor working for you?" />*@

@code {

	private static bool _firstTimeOnAfterRender = true;

	protected override async Task OnInitializedAsync() {
		_uiService.ShowActivityIndicator();

		await base.OnInitializedAsync();

		// Subscribe to the event
		_navManager.LocationChanged += LocationChanged;
	}

	void IDisposable.Dispose() {
		// Unsubscribe from the event when our component is disposed
		_navManager.LocationChanged -= LocationChanged;
	}

	void LocationChanged(object sender, LocationChangedEventArgs e) {
		string navigationMethod = e.IsNavigationIntercepted ? "HTML" : "code";
		System.Diagnostics.Debug.WriteLine($"Notified of navigation via {navigationMethod} to {e.Location}");
	}

	//
	// I invoke it only for performance reason (activate the SQlite cache for exams)
	//
	protected override async Task OnAfterRenderAsync(bool firstRender) {
		await base.OnAfterRenderAsync(firstRender);
		try {
			if (_firstTimeOnAfterRender) {
				_firstTimeOnAfterRender = false;
				_ = InvokeAsync(() => { _ = LocalCacheExams(); });
				//_ = Task.Run(async () => { await LocalCacheExams(); });
			}
			//return Task.CompletedTask;
		}
		finally {
			_uiService.HideActivityIndicator();
		}

		async Task LocalCacheExams() {
			using var scope = _serviceProvider.CreateScope();
			await using var dbContext = scope.ServiceProvider.GetRequiredService<QuizDBContext>();
			_ = await dbContext.Exams.Select(e => e.Id).ToListAsync();
		}
	}

	private async Task<PermissionStatus> CheckPermission<TPermission>(bool request = false)
		where TPermission : BasePermission, new() {
		PermissionStatus status = await Permissions.CheckStatusAsync<TPermission>();

		if ((status == PermissionStatus.Granted) || !request) return status;

		if (status == PermissionStatus.Denied && DeviceInfo.Platform == DevicePlatform.iOS) {
			// Prompt the user to turn on in settings
			// On iOS once a permission has been denied it may not be requested again from the application
			return status;
		}

		if (Permissions.ShouldShowRationale<TPermission>()) {
			// Prompt the user with additional information as to why the permission is needed
		}

		status = await Permissions.RequestAsync<TPermission>();
		return status;
	}
}